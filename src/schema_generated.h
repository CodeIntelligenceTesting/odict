// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace schema {

struct Usage;

struct Entry;

struct Dictionary;

enum POS {
  POS_verb = 0,
  POS_noun = 1,
  POS_adj = 2,
  POS_pronoun = 3,
  POS_adv = 4,
  POS_prep = 5,
  POS_conj = 6,
  POS_intj = 7,
  POS_MIN = POS_verb,
  POS_MAX = POS_intj
};

inline POS (&EnumValuesPOS())[8] {
  static POS values[] = {
    POS_verb,
    POS_noun,
    POS_adj,
    POS_pronoun,
    POS_adv,
    POS_prep,
    POS_conj,
    POS_intj
  };
  return values;
}

inline const char **EnumNamesPOS() {
  static const char *names[] = {
    "verb",
    "noun",
    "adj",
    "pronoun",
    "adv",
    "prep",
    "conj",
    "intj",
    nullptr
  };
  return names;
}

inline const char *EnumNamePOS(POS e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPOS()[index];
}

struct Usage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POS = 4,
    VT_DEFINITIONS = 6
  };
  const flatbuffers::String *pos() const {
    return GetPointer<const flatbuffers::String *>(VT_POS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *definitions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DEFINITIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.Verify(pos()) &&
           VerifyOffset(verifier, VT_DEFINITIONS) &&
           verifier.Verify(definitions()) &&
           verifier.VerifyVectorOfStrings(definitions()) &&
           verifier.EndTable();
  }
};

struct UsageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(flatbuffers::Offset<flatbuffers::String> pos) {
    fbb_.AddOffset(Usage::VT_POS, pos);
  }
  void add_definitions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> definitions) {
    fbb_.AddOffset(Usage::VT_DEFINITIONS, definitions);
  }
  UsageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UsageBuilder &operator=(const UsageBuilder &);
  flatbuffers::Offset<Usage> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Usage>(end);
    return o;
  }
};

inline flatbuffers::Offset<Usage> CreateUsage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> pos = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> definitions = 0) {
  UsageBuilder builder_(_fbb);
  builder_.add_definitions(definitions);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<Usage> CreateUsageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *pos = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *definitions = nullptr) {
  return schema::CreateUsage(
      _fbb,
      pos ? _fbb.CreateString(pos) : 0,
      definitions ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*definitions) : 0);
}

struct Entry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TERM = 4,
    VT_USAGES = 6
  };
  const flatbuffers::String *term() const {
    return GetPointer<const flatbuffers::String *>(VT_TERM);
  }
  bool KeyCompareLessThan(const Entry *o) const {
    return *term() < *o->term();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(term()->c_str(), val);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Usage>> *usages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Usage>> *>(VT_USAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TERM) &&
           verifier.Verify(term()) &&
           VerifyOffset(verifier, VT_USAGES) &&
           verifier.Verify(usages()) &&
           verifier.VerifyVectorOfTables(usages()) &&
           verifier.EndTable();
  }
};

struct EntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_term(flatbuffers::Offset<flatbuffers::String> term) {
    fbb_.AddOffset(Entry::VT_TERM, term);
  }
  void add_usages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Usage>>> usages) {
    fbb_.AddOffset(Entry::VT_USAGES, usages);
  }
  EntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntryBuilder &operator=(const EntryBuilder &);
  flatbuffers::Offset<Entry> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Entry>(end);
    fbb_.Required(o, Entry::VT_TERM);
    return o;
  }
};

inline flatbuffers::Offset<Entry> CreateEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> term = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Usage>>> usages = 0) {
  EntryBuilder builder_(_fbb);
  builder_.add_usages(usages);
  builder_.add_term(term);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entry> CreateEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *term = nullptr,
    const std::vector<flatbuffers::Offset<Usage>> *usages = nullptr) {
  return schema::CreateEntry(
      _fbb,
      term ? _fbb.CreateString(term) : 0,
      usages ? _fbb.CreateVector<flatbuffers::Offset<Usage>>(*usages) : 0);
}

struct Dictionary FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTRIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Entry>> *entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Entry>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.Verify(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           verifier.EndTable();
  }
};

struct DictionaryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Entry>>> entries) {
    fbb_.AddOffset(Dictionary::VT_ENTRIES, entries);
  }
  DictionaryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DictionaryBuilder &operator=(const DictionaryBuilder &);
  flatbuffers::Offset<Dictionary> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Dictionary>(end);
    return o;
  }
};

inline flatbuffers::Offset<Dictionary> CreateDictionary(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Entry>>> entries = 0) {
  DictionaryBuilder builder_(_fbb);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<Dictionary> CreateDictionaryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Entry>> *entries = nullptr) {
  return schema::CreateDictionary(
      _fbb,
      entries ? _fbb.CreateVector<flatbuffers::Offset<Entry>>(*entries) : 0);
}

inline const schema::Dictionary *GetDictionary(const void *buf) {
  return flatbuffers::GetRoot<schema::Dictionary>(buf);
}

inline bool VerifyDictionaryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<schema::Dictionary>(nullptr);
}

inline void FinishDictionaryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<schema::Dictionary> root) {
  fbb.Finish(root);
}

}  // namespace schema

#endif  // FLATBUFFERS_GENERATED_SCHEMA_SCHEMA_H_
